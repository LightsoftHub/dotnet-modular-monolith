@using Light.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components
@using ModularMonolith.Core.Authorization
@using ModularMonolith.Auth.Permissions

@page "/users"
@attribute [MustHavePermission(Permissions.Users.View)]

<PageHeader Title="Users" />

<div style="margin-top: 2rem;">
    <FluentButton @onclick="@OpenAddUserDialogAsync"
        IconStart="@(new Icons.Regular.Size16.AddCircle())"
        Appearance="Appearance.Accent">
        Add new
    </FluentButton>
</div>

<FluentDataGrid Items="@filteredUsers"
                ResizableColumns=true
                ResizeType="DataGridResizeType.Discrete"
                Pagination="@pagination"
                HeaderCellAsButtonWithMenu="true"
                Style="height: 405px;overflow:auto;"
                Loading="loading">

    <PropertyColumn Property="@(c => c.Id)" Sortable="true" Align="Align.Center" Tooltip="true" />

    <PropertyColumn Property="@(c => c.UserName)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Tooltip="true" Title="Username">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @bind-Value:after="HandleClear" Placeholder="username..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="@(c => c.FirstName)" Sortable="false" />

    <PropertyColumn Property="@(c => c.LastName)" Sortable="false" />

    <PropertyColumn Property="@(c => c.Email)" Sortable="false" />

    <PropertyColumn Property="@(c => c.PhoneNumber)" Sortable="false" />
</FluentDataGrid>


<FluentPaginator State="@pagination" />


@code {
    private IQueryable<UserDto>? users;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    string nameFilter = string.Empty;

    private bool loading = false;

    IQueryable<UserDto>? filteredUsers
    {
        get
        {
            var result = users;

            if (result is not null && !string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c =>
                    c.UserName!.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)
                    || c.FirstName!.Contains(nameFilter)
                    || c.LastName!.Contains(nameFilter)
                );
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadUserAsync();
    }

    private async Task ReloadUserAsync()
    {
        loading = true;

        var getUsers = await UserHttpService.GetAsync();
        if (getUsers.Succeeded)
        {
            users = getUsers.Data.AsQueryable();
        }

        loading = false;
    }

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private async Task OpenAddUserDialogAsync()
    {
        DialogParameters parameters = new()
        {
            Title = $"Create new user",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true,
            Width = "500px"
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<AddUserDialog>(parameters);
        DialogResult? dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled && dialogResult.Data != null)
        {
            var result = (Result)dialogResult.Data;

            if (result.Succeeded)
            {
                await ReloadUserAsync();
            }
        }
    }
}
