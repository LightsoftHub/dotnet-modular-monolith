@implements IDisposable

<FluentStack HorizontalAlignment="@HorizontalAlignment.End" VerticalAlignment="@VerticalAlignment.Center">
    <FluentProfileMenu Initials="@CurrentUser.UserName?.First().ToString().ToUpper()">
        <StartTemplate>
            @CurrentUser.FirstName @CurrentUser.LastName
        </StartTemplate>
        <HeaderTemplate>
            <FluentLabel Typo="@Typography.Header">@Web.CompanyName</FluentLabel>
        </HeaderTemplate>
        <ChildContent>
            <FluentPersona Name="@CurrentUser.FullName"
                           Status="PresenceStatus.Available"
                           StatusSize="PresenceBadgeSize.Small"
                           StatusTitle="He is available"
                           Image=""
                           ImageSize="50px">
            </FluentPersona>
            <FluentMenuItem>
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size24.ClipboardPaste())" Color="Color.Neutral" Slot="start" /></span>
                Menu item 4 with Icon
            </FluentMenuItem>
        </ChildContent>
        <FooterTemplate>
            <FluentStack>
                <FluentSpacer />
                @*
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <FluentButton Type="ButtonType.Submit" Style="width: 100%;">Logout</FluentButton>
                </form>
                *@
            </FluentStack>
        </FooterTemplate>
    </FluentProfileMenu>
</FluentStack>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public void Logout()
    {
        NavigationManager.NavigateTo($"account/logout?returnUrl={currentUrl}", forceLoad: true);
    }
}
